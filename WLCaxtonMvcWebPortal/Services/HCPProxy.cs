//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WLCaxtonMvcWebPortal.HCPServiceReference
{
    using System.Runtime.Serialization;
    using System;


    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name = "Bucket", Namespace = "http://schemas.datacontract.org/2004/07/AWSS3ServiceLayer")]
    [System.SerializableAttribute()]
    public partial class Bucket : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged
    {

        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;

        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int BucketIDField;

        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string BucketNameField;

        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CreatedDateField;

        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public int BucketID
        {
            get
            {
                return this.BucketIDField;
            }
            set
            {
                if ((this.BucketIDField.Equals(value) != true))
                {
                    this.BucketIDField = value;
                    this.RaisePropertyChanged("BucketID");
                }
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public string BucketName
        {
            get
            {
                return this.BucketNameField;
            }
            set
            {
                if ((object.ReferenceEquals(this.BucketNameField, value) != true))
                {
                    this.BucketNameField = value;
                    this.RaisePropertyChanged("BucketName");
                }
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CreatedDate
        {
            get
            {
                return this.CreatedDateField;
            }
            set
            {
                if ((object.ReferenceEquals(this.CreatedDateField, value) != true))
                {
                    this.CreatedDateField = value;
                    this.RaisePropertyChanged("CreatedDate");
                }
            }
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        protected void RaisePropertyChanged(string propertyName)
        {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null))
            {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }

    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name = "Key", Namespace = "http://schemas.datacontract.org/2004/07/AWSS3ServiceLayer")]
    [System.SerializableAttribute()]
    public partial class Key : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged
    {

        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;

        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string BucketNameField;

        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CreatedDateField;

        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DocumentIDField;

        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FileNameField;

        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IDField;

        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UrlField;

        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string VersionIDField;

        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public string BucketName
        {
            get
            {
                return this.BucketNameField;
            }
            set
            {
                if ((object.ReferenceEquals(this.BucketNameField, value) != true))
                {
                    this.BucketNameField = value;
                    this.RaisePropertyChanged("BucketName");
                }
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CreatedDate
        {
            get
            {
                return this.CreatedDateField;
            }
            set
            {
                if ((object.ReferenceEquals(this.CreatedDateField, value) != true))
                {
                    this.CreatedDateField = value;
                    this.RaisePropertyChanged("CreatedDate");
                }
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DocumentID
        {
            get
            {
                return this.DocumentIDField;
            }
            set
            {
                if ((object.ReferenceEquals(this.DocumentIDField, value) != true))
                {
                    this.DocumentIDField = value;
                    this.RaisePropertyChanged("DocumentID");
                }
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FileName
        {
            get
            {
                return this.FileNameField;
            }
            set
            {
                if ((object.ReferenceEquals(this.FileNameField, value) != true))
                {
                    this.FileNameField = value;
                    this.RaisePropertyChanged("FileName");
                }
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ID
        {
            get
            {
                return this.IDField;
            }
            set
            {
                if ((this.IDField.Equals(value) != true))
                {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Url
        {
            get
            {
                return this.UrlField;
            }
            set
            {
                if ((object.ReferenceEquals(this.UrlField, value) != true))
                {
                    this.UrlField = value;
                    this.RaisePropertyChanged("Url");
                }
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public string VersionID
        {
            get
            {
                return this.VersionIDField;
            }
            set
            {
                if ((object.ReferenceEquals(this.VersionIDField, value) != true))
                {
                    this.VersionIDField = value;
                    this.RaisePropertyChanged("VersionID");
                }
            }
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        protected void RaisePropertyChanged(string propertyName)
        {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null))
            {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName = "HCPServiceReference.IAWSS3FileTransfer")]
    public interface IAWSS3FileTransfer
    {

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IAWSS3FileTransfer/DoWork", ReplyAction = "http://tempuri.org/IAWSS3FileTransfer/DoWorkResponse")]
        void DoWork();

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IAWSS3FileTransfer/DoWork", ReplyAction = "http://tempuri.org/IAWSS3FileTransfer/DoWorkResponse")]
        System.Threading.Tasks.Task DoWorkAsync();

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IAWSS3FileTransfer/CreateBucket", ReplyAction = "http://tempuri.org/IAWSS3FileTransfer/CreateBucketResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(System.ServiceModel.FaultException), Action = "http://tempuri.org/IAWSS3FileTransfer/CreateBucketFaultExceptionFault", Name = "FaultException", Namespace = "http://schemas.datacontract.org/2004/07/System.ServiceModel")]
        bool CreateBucket(string Username, string client, string bucketname);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IAWSS3FileTransfer/CreateBucket", ReplyAction = "http://tempuri.org/IAWSS3FileTransfer/CreateBucketResponse")]
        System.Threading.Tasks.Task<bool> CreateBucketAsync(string Username, string client, string bucketname);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IAWSS3FileTransfer/GetBucketList", ReplyAction = "http://tempuri.org/IAWSS3FileTransfer/GetBucketListResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(System.ServiceModel.FaultException), Action = "http://tempuri.org/IAWSS3FileTransfer/GetBucketListFaultExceptionFault", Name = "FaultException", Namespace = "http://schemas.datacontract.org/2004/07/System.ServiceModel")]
        System.Collections.Generic.List<WLCaxtonMvcWebPortal.HCPServiceReference.Bucket> GetBucketList(string Username, string client, string bucketname);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IAWSS3FileTransfer/GetBucketList", ReplyAction = "http://tempuri.org/IAWSS3FileTransfer/GetBucketListResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<WLCaxtonMvcWebPortal.HCPServiceReference.Bucket>> GetBucketListAsync(string Username, string client, string bucketname);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IAWSS3FileTransfer/DeleteBucket", ReplyAction = "http://tempuri.org/IAWSS3FileTransfer/DeleteBucketResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(System.ServiceModel.FaultException), Action = "http://tempuri.org/IAWSS3FileTransfer/DeleteBucketFaultExceptionFault", Name = "FaultException", Namespace = "http://schemas.datacontract.org/2004/07/System.ServiceModel")]
        bool DeleteBucket(string Username, string client, string bucketName);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IAWSS3FileTransfer/DeleteBucket", ReplyAction = "http://tempuri.org/IAWSS3FileTransfer/DeleteBucketResponse")]
        System.Threading.Tasks.Task<bool> DeleteBucketAsync(string Username, string client, string bucketName);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IAWSS3FileTransfer/DeletingAnObject", ReplyAction = "http://tempuri.org/IAWSS3FileTransfer/DeletingAnObjectResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(System.ServiceModel.FaultException), Action = "http://tempuri.org/IAWSS3FileTransfer/DeletingAnObjectFaultExceptionFault", Name = "FaultException", Namespace = "http://schemas.datacontract.org/2004/07/System.ServiceModel")]
        bool DeletingAnObject(string Username, string client, string bucketName, string key);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IAWSS3FileTransfer/DeletingAnObject", ReplyAction = "http://tempuri.org/IAWSS3FileTransfer/DeletingAnObjectResponse")]
        System.Threading.Tasks.Task<bool> DeletingAnObjectAsync(string Username, string client, string bucketName, string key);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IAWSS3FileTransfer/ListBucketItem", ReplyAction = "http://tempuri.org/IAWSS3FileTransfer/ListBucketItemResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(System.ServiceModel.FaultException), Action = "http://tempuri.org/IAWSS3FileTransfer/ListBucketItemFaultExceptionFault", Name = "FaultException", Namespace = "http://schemas.datacontract.org/2004/07/System.ServiceModel")]
        System.Collections.Generic.List<WLCaxtonMvcWebPortal.HCPServiceReference.Key> ListBucketItem(string bucketName, string fileName);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IAWSS3FileTransfer/ListBucketItem", ReplyAction = "http://tempuri.org/IAWSS3FileTransfer/ListBucketItemResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<WLCaxtonMvcWebPortal.HCPServiceReference.Key>> ListBucketItemAsync(string bucketName, string fileName);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IAWSS3FileTransfer/ListingObjects", ReplyAction = "http://tempuri.org/IAWSS3FileTransfer/ListingObjectsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(System.ServiceModel.FaultException), Action = "http://tempuri.org/IAWSS3FileTransfer/ListingObjectsFaultExceptionFault", Name = "FaultException", Namespace = "http://schemas.datacontract.org/2004/07/System.ServiceModel")]
        System.Collections.Generic.List<WLCaxtonMvcWebPortal.HCPServiceReference.Key> ListingObjects(string Username, string client, string bucketName, string fileName);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IAWSS3FileTransfer/ListingObjects", ReplyAction = "http://tempuri.org/IAWSS3FileTransfer/ListingObjectsResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<WLCaxtonMvcWebPortal.HCPServiceReference.Key>> ListingObjectsAsync(string Username, string client, string bucketName, string fileName);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IAWSS3FileTransfer/WritingAnObject", ReplyAction = "http://tempuri.org/IAWSS3FileTransfer/WritingAnObjectResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(System.ServiceModel.FaultException), Action = "http://tempuri.org/IAWSS3FileTransfer/WritingAnObjectFaultExceptionFault", Name = "FaultException", Namespace = "http://schemas.datacontract.org/2004/07/System.ServiceModel")]
        bool WritingAnObject(string Username, string client, string bucketName, string fileName, string filePath);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IAWSS3FileTransfer/WritingAnObject", ReplyAction = "http://tempuri.org/IAWSS3FileTransfer/WritingAnObjectResponse")]
        System.Threading.Tasks.Task<bool> WritingAnObjectAsync(string Username, string client, string bucketName, string fileName, string filePath);


        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IAWSS3FileTransfer/GetHitachiObject", ReplyAction = "http://tempuri.org/IAWSS3FileTransfer/GetHitachiObjectResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(System.ServiceModel.FaultException), Action = "http://tempuri.org/IAWSS3FileTransfer/GetHitachiObjectFaultExceptionFault", Name = "FaultException", Namespace = "http://schemas.datacontract.org/2004/07/System.ServiceModel")]
        byte[] GetHitachiObject(string bucketName, string filename, string DocumentPath);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IAWSS3FileTransfer/GetHitachiObject", ReplyAction = "http://tempuri.org/IAWSS3FileTransfer/GetHitachiObjectResponse")]
        System.Threading.Tasks.Task<byte[]> GetHitachiObjectAsync(string bucketName, string filename, string DocumentPath);
   
    
    
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IAWSS3FileTransferChannel : WLCaxtonMvcWebPortal.HCPServiceReference.IAWSS3FileTransfer, System.ServiceModel.IClientChannel
    {
    }

    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AWSS3FileTransferClient : System.ServiceModel.ClientBase<WLCaxtonMvcWebPortal.HCPServiceReference.IAWSS3FileTransfer>, WLCaxtonMvcWebPortal.HCPServiceReference.IAWSS3FileTransfer
    {

        public AWSS3FileTransferClient()
        {
        }

        public AWSS3FileTransferClient(string endpointConfigurationName) :
                base(endpointConfigurationName)
        {
        }

        public AWSS3FileTransferClient(string endpointConfigurationName, string remoteAddress) :
                base(endpointConfigurationName, remoteAddress)
        {
        }

        public AWSS3FileTransferClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) :
                base(endpointConfigurationName, remoteAddress)
        {
        }

        public AWSS3FileTransferClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) :
                base(binding, remoteAddress)
        {
        }

        public void DoWork()
        {
            base.Channel.DoWork();
        }

        public System.Threading.Tasks.Task DoWorkAsync()
        {
            return base.Channel.DoWorkAsync();
        }

        public bool CreateBucket(string Username, string client, string bucketname)
        {
            return base.Channel.CreateBucket(Username, client, bucketname);
        }

        public System.Threading.Tasks.Task<bool> CreateBucketAsync(string Username, string client, string bucketname)
        {
            return base.Channel.CreateBucketAsync(Username, client, bucketname);
        }

        public System.Collections.Generic.List<WLCaxtonMvcWebPortal.HCPServiceReference.Bucket> GetBucketList(string Username, string client, string bucketname)
        {
            return base.Channel.GetBucketList(Username, client, bucketname);
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<WLCaxtonMvcWebPortal.HCPServiceReference.Bucket>> GetBucketListAsync(string Username, string client, string bucketname)
        {
            return base.Channel.GetBucketListAsync(Username, client, bucketname);
        }

        public bool DeleteBucket(string Username, string client, string bucketName)
        {
            return base.Channel.DeleteBucket(Username, client, bucketName);
        }

        public System.Threading.Tasks.Task<bool> DeleteBucketAsync(string Username, string client, string bucketName)
        {
            return base.Channel.DeleteBucketAsync(Username, client, bucketName);
        }

        public bool DeletingAnObject(string Username, string client, string bucketName, string key)
        {
            return base.Channel.DeletingAnObject(Username, client, bucketName, key);
        }

        public System.Threading.Tasks.Task<bool> DeletingAnObjectAsync(string Username, string client, string bucketName, string key)
        {
            return base.Channel.DeletingAnObjectAsync(Username, client, bucketName, key);
        }

        public System.Collections.Generic.List<WLCaxtonMvcWebPortal.HCPServiceReference.Key> ListBucketItem(string bucketName, string fileName)
        {
            return base.Channel.ListBucketItem(bucketName, fileName);
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<WLCaxtonMvcWebPortal.HCPServiceReference.Key>> ListBucketItemAsync(string bucketName, string fileName)
        {
            return base.Channel.ListBucketItemAsync(bucketName, fileName);
        }

        public System.Collections.Generic.List<WLCaxtonMvcWebPortal.HCPServiceReference.Key> ListingObjects(string Username, string client, string bucketName, string fileName)
        {
            return base.Channel.ListingObjects(Username, client, bucketName, fileName);
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<WLCaxtonMvcWebPortal.HCPServiceReference.Key>> ListingObjectsAsync(string Username, string client, string bucketName, string fileName)
        {
            return base.Channel.ListingObjectsAsync(Username, client, bucketName, fileName);
        }

        public bool WritingAnObject(string Username, string client, string bucketName, string fileName, string filePath)
        {
            return base.Channel.WritingAnObject(Username, client, bucketName, fileName, filePath);
        }

        public System.Threading.Tasks.Task<bool> WritingAnObjectAsync(string Username, string client, string bucketName, string fileName, string filePath)
        {
            return base.Channel.WritingAnObjectAsync(Username, client, bucketName, fileName, filePath);
        }
        public byte[] GetHitachiObject(string bucketName, string filename, string DocumentPath)
        {
            return base.Channel.GetHitachiObject(bucketName, filename, DocumentPath);
        }

        public System.Threading.Tasks.Task<byte[]> GetHitachiObjectAsync(string bucketName, string filename, string DocumentPath)
        {
            return base.Channel.GetHitachiObjectAsync(bucketName, filename, DocumentPath);
        }
    }
}
